title: $:/plugins/danielo515/tiddlypouch/boot
tags: $:/tags/RawMarkup

<style>
    #TP_splash_screen {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 100%;
         background-color: #FFF;
         margin: 0;
         font-size: 14px;

        -webkit-transition: opacity 2s ease-in-out;
        -moz-transition: opacity 2s ease-in-out;
        -ms-transition: opacity 2s ease-in-out;
        -o-transition: opacity 2s ease-in-out;
        transition: opacity 2s ease-in-out;
    }
    #TP_splash_screen>h1{
       text-align: center;
       color: #CECECE;
       font-size: 5.5em;

       width: 100%;
       position: relative;
       word-wrap: break-word;
       font-weight: 300;
       margin: 0.67em 0;
       line-height: 1.2;
       font-family: "Helvetica Neue", Helvetica, Arial, "Lucida Grande", "DejaVu Sans", sans-serif;
       text-rendering: optimizeLegibility;
      -webkit-font-smoothing: antialiased;
      -webkit-box-sizing: border-box;
      box-sizing: border-box;


    }
    @media (min-width: 1200px) {
        #TP_splash_screen>h1 {
            font-size: 12em;
        }
    }
    #TP_splash_screen>h1:before {
        content: attr(data-text);
        overflow: hidden;
        position: absolute;
        max-width: 5.5em;
        white-space: nowrap;
        color: #93cf93;
        animation: loading 6s linear;
    }
    @keyframes loading {
        0% {
            max-width: 0;
        }
    }

</style>


<script>
    (function(window){
        'use strict';
        /***** Base TiddlyPouch module creation ****/
        var $TPouch = window.$TPouch || Object.create(null);
        if($TPouch.supressBoot){ /** Allow external JS to avoid boot */
            return
        }
        $TPouch._configDb = $TPouch._configDb || new PouchDB('__TP_config');
        $TPouch.splashScreen = $TPouch.splashScreen || Object.create(null);
        /*** The version section is automatically updated by build scripts,  Dont delete the below comment */
        $TPouch.VERSION = /***TPOUCH_VER*/'0.23.0'/*TPOUCH_VER***/;

        var $tw = window.$tw || Object.create(null);
        $tw.boot = $tw.boot || Object.create(null);
        $tw.boot.suppressBoot = true

        window.$TPouch = $TPouch;
        window.$tw = $tw;

        /** Creates a new message node to be used on the splashScreen*/
        function createSplashMessageNode(message){

            var h1 = document.createElement("h1");
            h1.setAttribute("data-text",message);
            var text = document.createTextNode(message);
            h1.appendChild(text);
            return h1;
        }

        function createSplashScreen(message){

            /* This function waits until document.body exists*/
            function tryToAppend(node){
                if(!document.body){
                    return setTimeout(tryToAppend.bind(null,node),1);
                }
                document.body.appendChild( node, document.body.firstChild );
            }

            var splash = document.getElementById('TP_splash_screen');
            if( splash === null){
                splash = document.createElement("div");
                splash.setAttribute("id","TP_splash_screen");
                splash.appendChild(createSplashMessageNode(message));
                tryToAppend(splash);
            } else{
                splashMessage(message);
            }

            $TPouch.splashScreen.node = splash;
        }
        /** Hides the splash screen allowing the cool css animation to execute*/
        $TPouch.splashScreen.hide = function hideSplashScreen(){
            /** We first set opacity to 0 to allow the css animations kick in
             * Two seconds later , when animation has finished
             * we set display to none so it does not takes space on the page.
             * Display none can not be animated, that's why we use opacity first.
            */
            $TPouch.splashScreen.node.style.opacity = 0;
            setTimeout( function(){

                $TPouch.splashScreen.node.style.display = "none";
            } ,2000);

        };
        $TPouch.splashScreen.showMessage = function splashMessage(message){

            var node = $TPouch.splashScreen.node;
            node.replaceChild(createSplashMessageNode(message), node.firstChild)
            node.style.display = "block";
            node.style.opacity = 1;
        };

        /**
         * Checks if the current version on the database is lower than the current version
         * if so, it deletes all the indexes so they can be recreated
         * @param {string} version - The version of TiddlyPouch that the database being updated has
         * @param {PouchDB} db - The actual Pouch database that we are updating
         * @returns {promise} - promise that fulfills when all the indexes have been processed, removed or failed removing
         */
            function updater(version, db) {

                var documentsToRemove = [
                    '_design/by_type', '_design/skinny_tiddlers',
                    '_design/by_plugin_type' , '_design/filtered_replication',
                    '_design/TiddlyPouch','_design/startup_tiddlers'
                    ];

                if (version && !(parseInt(version.split('.').join('')) < parseInt($TPouch.VERSION.split('.').join('')))) {
                    return Promise.resolve();
                }
                console.log('Starting update process...');
                $TPouch.splashScreen.showMessage('Updating database');
                return Promise.all(
                    documentsToRemove
                        .map(function (doc) {

                            return db.get(doc)
                                .then(function (docu) {
                                    console.log('Removing index ', doc);
                                    return db.remove(docu)
                                })
                                .catch(console.log.bind(console, 'Error removing ', doc, ' which may be totally fine if it did not exist.'))
                        })
                    )
                    .then(function () {
                        console.log('Update process complete');
                    });
            }



        createSplashScreen('Loading');

        $TPouch._configDb.get('configuration') // we read the configuration to know which database shuld be loaded
        .then(function(config){

            if(!config.selectedDbId){
                throw new Error('There is no DB selected, nothing to inject')
            }
            /** Create the default db, it should be wrapped later on the boot proces in a {@link DbStore} */
            $TPouch._db = new PouchDB(config.selectedDbId);
            var oldVer = config.databases[config.selectedDbId].version;
            return updater(oldVer , $TPouch._db)
                    .then(function(){ /** After the update process, flag the db with latest version */
                        config.databases[config.selectedDbId].version = $TPouch.VERSION;
                        return $TPouch._configDb.put(config);
                    })
        })
        .then(function(){

            return $TPouch._db.query('startup_tiddlers', { include_docs: true })
        })
        .then(function(all){ //Actual docs are contained in the rows array

            console.log('Injecting ', all.total_rows, ' startup tiddlers into tw');
            var startupTids = all.rows.map(function(row){

                return row.doc.fields
            });
            window.$tw.preloadTiddlers = startupTids;
        }).catch(function(reason){ // catch any possible error and continue the chain

            console.log('Something went wrong during plugin injection ', reason);
        }).then(function(){
            try{
                $tw.boot.boot(); // boot when chain completes, even if we got some errors
            }catch(err){
                console.error('Something went wrong booting tiddlywiki ',err);
                window.location.reload();
            }

        })



    })(window);
</script>
